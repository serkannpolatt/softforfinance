import streamlit as st
import yfinance as yf
import mplfinance as mpf
import pandas as pd
from PIL import Image
from datetime import datetime, timedelta
from io import BytesIO
from ultralytics import YOLO

# Model dosyasÄ±nÄ±n yolu
model_path = "SFW-STOCK SCAN/weights/custom_yolov8.pt"


# Sayfa dÃ¼zeni ayarÄ±
st.set_page_config(
    page_title="SFW-STOCK SCAN",  # Sayfa baÅŸlÄ±ÄŸÄ±
    page_icon="ğŸ“Š",  # Sayfa ikonu
    layout="wide",  # GeniÅŸ dÃ¼zen
    initial_sidebar_state="expanded",  # Kenar Ã§ubuÄŸunu varsayÄ±lan olarak geniÅŸlet
)


# Grafik indirme ve Ã§izim fonksiyonu
def generate_chart(ticker, interval="1d", chunk_size=180, figsize=(18, 6.5), dpi=100):
    if interval == "1h":
        end_date = datetime.now()
        start_date = end_date - timedelta(days=730)
        period = None
    else:
        start_date = None
        end_date = None
        period = "max"

    # Ticker verilerini indir
    data = yf.download(
        ticker, interval=interval, start=start_date, end=end_date, period=period
    )

    # Ä°ndeksin DatetimeIndex olduÄŸundan emin olun ve verilerin boÅŸ olup olmadÄ±ÄŸÄ±nÄ± kontrol edin
    if not data.empty:
        data.index = pd.to_datetime(data.index)
        # En son 180 mumlarÄ± seÃ§in
        data = data.iloc[-chunk_size:]

        # GrafiÄŸi Ã§iz
        fig, ax = mpf.plot(
            data,
            type="candle",
            style="yahoo",
            title=f"{ticker} Son {chunk_size} Mumlar",
            axisoff=True,
            ylabel="",
            ylabel_lower="",
            volume=False,
            figsize=figsize,
            returnfig=True,
        )

        # GrafiÄŸi bir BytesIO nesnesine kaydet
        buffer = BytesIO()
        fig.savefig(buffer, format="png", dpi=dpi)  # DPI burada ayarlanÄ±r
        buffer.seek(0)
        return buffer
    else:
        st.error("Belirtilen ticker ve aralÄ±k iÃ§in veri bulunamadÄ±.")
        return None


# Kenar Ã§ubuÄŸunu oluÅŸturma
with st.sidebar:
    st.write("")
    st.header("KonfigÃ¼rasyonlar")  # Kenar Ã§ubuÄŸuna baÅŸlÄ±k ekle
    # Grafik oluÅŸturma ve indirme bÃ¶lÃ¼mÃ¼
    st.subheader("Grafik OluÅŸtur")
    ticker = st.text_input("Ticker SembolÃ¼nÃ¼ Girin (Ã¶r. AAPL):")
    interval = st.selectbox("AralÄ±ÄŸÄ± SeÃ§in", ["1d", "1h", "1wk"])
    chunk_size = 180  # VarsayÄ±lan mum sayÄ±sÄ±
    if st.button("Grafik OluÅŸtur"):
        if ticker:
            chart_buffer = generate_chart(
                ticker, interval=interval, chunk_size=chunk_size
            )
            if chart_buffer:
                st.success("Grafik baÅŸarÄ±yla oluÅŸturuldu.")
                st.download_button(
                    label=f"{ticker} GrafiÄŸini Ä°ndir",
                    data=chart_buffer,
                    file_name=f"{ticker}_son_{chunk_size}_mumlar.png",
                    mime="image/png",
                )
                st.image(
                    chart_buffer, caption=f"{ticker} GrafiÄŸi", use_column_width=True
                )
        else:
            st.error("LÃ¼tfen geÃ§erli bir ticker sembolÃ¼ girin.")
    st.write("")
    st.subheader("Tespit iÃ§in GÃ¶rÃ¼ntÃ¼ YÃ¼kle")
    # GÃ¶rÃ¼ntÃ¼ seÃ§mek iÃ§in dosya yÃ¼kleyici ekleyin
    source_img = st.file_uploader(
        "Bir gÃ¶rÃ¼ntÃ¼ yÃ¼kleyin...", type=("jpg", "jpeg", "png", "bmp", "webp")
    )

    # Model seÃ§enekleri
    confidence = float(st.slider("Model GÃ¼venini SeÃ§in", 25, 100, 30)) / 100

# Ana sayfa baÅŸlÄ±ÄŸÄ±nÄ± oluÅŸturma
st.title("SFW-STOCK SCAN")
st.caption("ğŸ“ˆ UygulamayÄ± kullanmak iÃ§in aÅŸaÄŸÄ±daki seÃ§eneklerden birini seÃ§in:")

st.markdown("""
**SeÃ§enek 1: Kendi GÃ¶rÃ¼ntÃ¼nÃ¼zÃ¼ YÃ¼kleyin**
1. **GÃ¶rÃ¼ntÃ¼ YÃ¼kle:** Yerel PC'nizden bir mum grafiÄŸi gÃ¶rÃ¼ntÃ¼sÃ¼ yÃ¼klemek iÃ§in kenar Ã§ubuÄŸunu kullanÄ±n.
2. **Nesneleri Tespit Et:** YÃ¼klenen grafiÄŸi analiz etmek iÃ§in :blue[Nesneleri Tespit Et] butonuna tÄ±klayÄ±n.

**SeÃ§enek 2: Grafik OluÅŸtur ve Analiz Et**
1. **Grafik OluÅŸtur:** Kenar Ã§ubuÄŸuna ticker sembolÃ¼ ve aralÄ±ÄŸÄ±nÄ± girerek bir grafik oluÅŸturun ve indirin (son 180 mumlar).
2. **OluÅŸturulan GrafiÄŸi YÃ¼kle:** Kenar Ã§ubuÄŸunu kullanarak oluÅŸturulan grafik gÃ¶rÃ¼ntÃ¼sÃ¼nÃ¼ yÃ¼kleyin.
3. **Nesneleri Tespit Et:** OluÅŸturulan grafiÄŸi analiz etmek iÃ§in :blue[Nesneleri Tespit Et] butonuna tÄ±klayÄ±n.
""")

# Ana sayfada iki sÃ¼tun oluÅŸturma
col1, col2 = st.columns(2)

# GÃ¶rÃ¼ntÃ¼ yÃ¼klendiÄŸinde ilk sÃ¼tuna ekleme
if source_img:
    with col1:
        # YÃ¼klenen gÃ¶rÃ¼ntÃ¼yÃ¼ aÃ§ma
        uploaded_image = Image.open(source_img)
        # YÃ¼klenen gÃ¶rÃ¼ntÃ¼yÃ¼ baÅŸlÄ±k ile sayfaya ekleme
        st.image(uploaded_image, caption="YÃ¼klenen GÃ¶rÃ¼ntÃ¼", use_column_width=True)

# Modeli yÃ¼kle
try:
    model = YOLO(model_path)
except Exception as ex:
    st.error(f"Model yÃ¼klenemiyor. Belirtilen yolu kontrol edin: {model_path}")
    st.error(ex)

# Butona tÄ±klanÄ±rsa nesne tespiti yapma
if st.sidebar.button("Nesneleri Tespit Et"):
    if source_img:
        # GÃ¶rÃ¼ntÃ¼yÃ¼ yeniden aÃ§mak iÃ§in dosya iÅŸaretÃ§isini sÄ±fÄ±rlama
        source_img.seek(0)
        uploaded_image = Image.open(source_img)

        # Nesne tespiti yapma
        res = model.predict(uploaded_image, conf=confidence)
        boxes = res[0].boxes
        res_plotted = res[0].plot()[:, :, ::-1]
        with col2:
            st.image(
                res_plotted, caption="Tespit Edilen GÃ¶rÃ¼ntÃ¼", use_column_width=True
            )
            try:
                with st.expander("Tespit SonuÃ§larÄ±"):
                    for box in boxes:
                        st.write(box.xywh)
            except Exception:
                st.write("Tespit sonuÃ§larÄ±nÄ± gÃ¶rÃ¼ntÃ¼lerken hata oluÅŸtu.")
    else:
        st.error("LÃ¼tfen Ã¶nce bir gÃ¶rÃ¼ntÃ¼ yÃ¼kleyin.")
